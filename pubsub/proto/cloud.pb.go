// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cloud.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "google.golang.org/genproto/googleapis/pubsub/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReceivedMessage and its corresponding acknowledgment ID.
type ReceivedMessage struct {
	// This ID can be used to acknowledge the received message.
	AckId string `protobuf:"bytes,1,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	// The message.
	Message *v1.PubsubMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Delivery attempt counter is 1 + (the sum of number of NACKs and number of
	// ack_deadline exceeds) for this message.
	//
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline
	// exceeds event is whenever a message is not acknowledged within
	// ack_deadline. Note that ack_deadline is initially
	// Subscription.ackDeadlineSeconds, but may get extended automatically by
	// the client library.
	//
	// The first delivery of a given message will have this value as 1. The value
	// is calculated at best effort and is approximate.
	//
	// If a DeadLetterPolicy is not set on the subscription, this will be 0.
	// <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This
	// API might be changed in backward-incompatible ways and is not recommended
	// for production use. It is not subject to any SLA or deprecation policy.
	DeliveryAttempt int32 `protobuf:"varint,3,opt,name=delivery_attempt,json=deliveryAttempt,proto3" json:"delivery_attempt,omitempty"`
	// Required. The name of the subscription.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription         string   `protobuf:"bytes,4,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceivedMessage) Reset()         { *m = ReceivedMessage{} }
func (m *ReceivedMessage) String() string { return proto.CompactTextString(m) }
func (*ReceivedMessage) ProtoMessage()    {}
func (*ReceivedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f9cba63d8f209f, []int{0}
}

func (m *ReceivedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceivedMessage.Unmarshal(m, b)
}
func (m *ReceivedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceivedMessage.Marshal(b, m, deterministic)
}
func (m *ReceivedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivedMessage.Merge(m, src)
}
func (m *ReceivedMessage) XXX_Size() int {
	return xxx_messageInfo_ReceivedMessage.Size(m)
}
func (m *ReceivedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivedMessage proto.InternalMessageInfo

func (m *ReceivedMessage) GetAckId() string {
	if m != nil {
		return m.AckId
	}
	return ""
}

func (m *ReceivedMessage) GetMessage() *v1.PubsubMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ReceivedMessage) GetDeliveryAttempt() int32 {
	if m != nil {
		return m.DeliveryAttempt
	}
	return 0
}

func (m *ReceivedMessage) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func init() {
	proto.RegisterType((*ReceivedMessage)(nil), "cliche.cloud.pubsub.proto.ReceivedMessage")
}

func init() { proto.RegisterFile("cloud.proto", fileDescriptor_01f9cba63d8f209f) }

var fileDescriptor_01f9cba63d8f209f = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xc9, 0x2f,
	0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4c, 0xce, 0xc9, 0x4c, 0xce, 0x48, 0xd5,
	0x83, 0x8a, 0x95, 0x26, 0x15, 0x97, 0x26, 0x41, 0xa4, 0xa4, 0x64, 0xd3, 0xf3, 0xf3, 0xd3, 0x73,
	0x52, 0xf5, 0x21, 0x82, 0xfa, 0x65, 0x86, 0xfa, 0xc8, 0xd2, 0x4a, 0x9b, 0x18, 0xb9, 0xf8, 0x83,
	0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x53, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x44,
	0xb9, 0xd8, 0x12, 0x93, 0xb3, 0xe3, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x58,
	0x13, 0x93, 0xb3, 0x3d, 0x53, 0x84, 0x2c, 0xb9, 0xd8, 0x73, 0x21, 0x2a, 0x24, 0x98, 0x14, 0x18,
	0x35, 0xb8, 0x8d, 0xe4, 0xf5, 0x20, 0x66, 0xc3, 0x2c, 0x2c, 0x33, 0xd4, 0x0b, 0x00, 0xb3, 0xa0,
	0x06, 0x05, 0xc1, 0xd4, 0x0b, 0x69, 0x72, 0x09, 0xa4, 0xa4, 0xe6, 0x64, 0x96, 0xa5, 0x16, 0x55,
	0xc6, 0x27, 0x96, 0x94, 0xa4, 0xe6, 0x16, 0x94, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x06, 0xf1,
	0xc3, 0xc4, 0x1d, 0x21, 0xc2, 0x42, 0x4a, 0x5c, 0x3c, 0xc5, 0xa5, 0x49, 0xc5, 0xc9, 0x45, 0x99,
	0x05, 0x25, 0x99, 0xf9, 0x79, 0x12, 0x2c, 0x60, 0x27, 0xa0, 0x88, 0x39, 0xb1, 0x47, 0xb1, 0x82,
	0x5d, 0x9f, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x34, 0x29, 0x25,
	0x0d, 0x01, 0x00, 0x00,
}
