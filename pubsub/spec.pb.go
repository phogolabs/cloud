// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spec.proto

package pubsub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/pubsub/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReceivedMessage and its corresponding acknowledgment ID.
type ReceivedMessage struct {
	// This ID can be used to acknowledge the received message.
	AckId string `protobuf:"bytes,1,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	// The message.
	Message *v1.PubsubMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Delivery attempt counter is 1 + (the sum of number of NACKs and number of
	// ack_deadline exceeds) for this message.
	//
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline
	// exceeds event is whenever a message is not acknowledged within
	// ack_deadline. Note that ack_deadline is initially
	// Subscription.ackDeadlineSeconds, but may get extended automatically by
	// the client library.
	//
	// The first delivery of a given message will have this value as 1. The value
	// is calculated at best effort and is approximate.
	//
	// If a DeadLetterPolicy is not set on the subscription, this will be 0.
	// <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This
	// API might be changed in backward-incompatible ways and is not recommended
	// for production use. It is not subject to any SLA or deprecation policy.
	DeliveryAttempt int32 `protobuf:"varint,3,opt,name=delivery_attempt,json=deliveryAttempt,proto3" json:"delivery_attempt,omitempty"`
	// Required. The name of the subscription.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription         string   `protobuf:"bytes,4,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceivedMessage) Reset()         { *m = ReceivedMessage{} }
func (m *ReceivedMessage) String() string { return proto.CompactTextString(m) }
func (*ReceivedMessage) ProtoMessage()    {}
func (*ReceivedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}

func (m *ReceivedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceivedMessage.Unmarshal(m, b)
}
func (m *ReceivedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceivedMessage.Marshal(b, m, deterministic)
}
func (m *ReceivedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivedMessage.Merge(m, src)
}
func (m *ReceivedMessage) XXX_Size() int {
	return xxx_messageInfo_ReceivedMessage.Size(m)
}
func (m *ReceivedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivedMessage proto.InternalMessageInfo

func (m *ReceivedMessage) GetAckId() string {
	if m != nil {
		return m.AckId
	}
	return ""
}

func (m *ReceivedMessage) GetMessage() *v1.PubsubMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ReceivedMessage) GetDeliveryAttempt() int32 {
	if m != nil {
		return m.DeliveryAttempt
	}
	return 0
}

func (m *ReceivedMessage) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func init() {
	proto.RegisterType((*ReceivedMessage)(nil), "phogolabs.cloud.pubsub.ReceivedMessage")
}

func init() { proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }

var fileDescriptor_423806180556987f = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xb1, 0x4e, 0xf3, 0x30,
	0x18, 0x54, 0xfa, 0xff, 0x6d, 0xa9, 0x41, 0x14, 0x59, 0x50, 0x45, 0x05, 0x44, 0x95, 0x85, 0xd0,
	0xc1, 0x56, 0xcb, 0x04, 0x4c, 0x20, 0x31, 0x30, 0x20, 0xa1, 0x8c, 0x2c, 0xc5, 0x76, 0x4c, 0x6a,
	0x35, 0xad, 0xad, 0xd8, 0x8e, 0xd4, 0x95, 0x57, 0xe0, 0x4d, 0x78, 0x15, 0x5e, 0x81, 0x07, 0x41,
	0xb5, 0x9d, 0x4a, 0x20, 0xa6, 0x5c, 0xee, 0x3e, 0xdf, 0x77, 0xdf, 0x01, 0xa0, 0x15, 0x67, 0x48,
	0x55, 0xd2, 0x48, 0x38, 0x50, 0x73, 0x59, 0xc8, 0x92, 0x50, 0x8d, 0x58, 0x29, 0x6d, 0x8e, 0x94,
	0xa5, 0xda, 0xd2, 0xe1, 0x49, 0x21, 0x65, 0x51, 0x72, 0x4c, 0x94, 0xc0, 0x64, 0xb5, 0x92, 0x86,
	0x18, 0x21, 0x57, 0xda, 0xbf, 0x1a, 0x1e, 0x07, 0xd5, 0xfd, 0x51, 0xfb, 0x8a, 0xf9, 0x52, 0x99,
	0x75, 0x10, 0x4f, 0x1b, 0xd1, 0x39, 0xe1, 0x7a, 0x12, 0x90, 0x97, 0x93, 0x8f, 0x08, 0xf4, 0x33,
	0xce, 0xb8, 0xa8, 0x79, 0xfe, 0xc8, 0xb5, 0x26, 0x05, 0x87, 0x47, 0xa0, 0x43, 0xd8, 0x62, 0x26,
	0xf2, 0x38, 0x1a, 0x45, 0x69, 0x2f, 0x6b, 0x13, 0xb6, 0x78, 0xc8, 0xe1, 0x15, 0xe8, 0x2e, 0xfd,
	0x44, 0xdc, 0x1a, 0x45, 0xe9, 0xee, 0xf4, 0x0c, 0x79, 0xef, 0x90, 0x12, 0xd5, 0x13, 0xf4, 0xe4,
	0x50, 0x30, 0xca, 0x9a, 0x79, 0x78, 0x01, 0x0e, 0x72, 0x5e, 0x8a, 0x9a, 0x57, 0xeb, 0x19, 0x31,
	0x66, 0x93, 0x2f, 0xfe, 0x37, 0x8a, 0xd2, 0x76, 0xd6, 0x6f, 0xf8, 0x5b, 0x4f, 0xc3, 0x04, 0xec,
	0x69, 0x4b, 0x35, 0xab, 0x84, 0xda, 0xdc, 0x18, 0xff, 0x77, 0x11, 0x7e, 0x70, 0xd3, 0x12, 0xec,
	0x84, 0xcc, 0x15, 0x7c, 0x01, 0xdd, 0x80, 0xe1, 0x39, 0xfa, 0xbb, 0x3e, 0xf4, 0xeb, 0xc0, 0xe1,
	0x60, 0x1b, 0x3c, 0x34, 0x86, 0xee, 0x37, 0x8d, 0x25, 0x87, 0x6f, 0x9f, 0x5f, 0xef, 0xad, 0xfd,
	0xa4, 0x87, 0x8d, 0x54, 0x82, 0x69, 0x3c, 0xbe, 0x8e, 0xc6, 0x77, 0xe3, 0xe7, 0xb4, 0x10, 0x66,
	0x6e, 0x29, 0x62, 0x72, 0x89, 0xb7, 0x2b, 0xb0, 0x5b, 0x11, 0xda, 0xbc, 0xf1, 0x1f, 0xda, 0x71,
	0x8e, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x50, 0xcf, 0x13, 0xd5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReceiverClient interface {
	// Receive receives a pub-sub message
	Receive(ctx context.Context, in *ReceivedMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) Receive(ctx context.Context, in *ReceivedMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/phogolabs.cloud.pubsub.Receiver/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
type ReceiverServer interface {
	// Receive receives a pub-sub message
	Receive(context.Context, *ReceivedMessage) (*empty.Empty, error)
}

// UnimplementedReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (*UnimplementedReceiverServer) Receive(ctx context.Context, req *ReceivedMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterReceiverServer(s *grpc.Server, srv ReceiverServer) {
	s.RegisterService(&_Receiver_serviceDesc, srv)
}

func _Receiver_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phogolabs.cloud.pubsub.Receiver/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).Receive(ctx, req.(*ReceivedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Receiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "phogolabs.cloud.pubsub.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _Receiver_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}
