// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/phogolabs/cloud"
)

type FakeEventArgsDispatcher struct {
	DispatchStub        func(context.Context, cloud.EventArgs) error
	dispatchMutex       sync.RWMutex
	dispatchArgsForCall []struct {
		arg1 context.Context
		arg2 cloud.EventArgs
	}
	dispatchReturns struct {
		result1 error
	}
	dispatchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventArgsDispatcher) Dispatch(arg1 context.Context, arg2 cloud.EventArgs) error {
	fake.dispatchMutex.Lock()
	ret, specificReturn := fake.dispatchReturnsOnCall[len(fake.dispatchArgsForCall)]
	fake.dispatchArgsForCall = append(fake.dispatchArgsForCall, struct {
		arg1 context.Context
		arg2 cloud.EventArgs
	}{arg1, arg2})
	fake.recordInvocation("Dispatch", []interface{}{arg1, arg2})
	fake.dispatchMutex.Unlock()
	if fake.DispatchStub != nil {
		return fake.DispatchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.dispatchReturns
	return fakeReturns.result1
}

func (fake *FakeEventArgsDispatcher) DispatchCallCount() int {
	fake.dispatchMutex.RLock()
	defer fake.dispatchMutex.RUnlock()
	return len(fake.dispatchArgsForCall)
}

func (fake *FakeEventArgsDispatcher) DispatchCalls(stub func(context.Context, cloud.EventArgs) error) {
	fake.dispatchMutex.Lock()
	defer fake.dispatchMutex.Unlock()
	fake.DispatchStub = stub
}

func (fake *FakeEventArgsDispatcher) DispatchArgsForCall(i int) (context.Context, cloud.EventArgs) {
	fake.dispatchMutex.RLock()
	defer fake.dispatchMutex.RUnlock()
	argsForCall := fake.dispatchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEventArgsDispatcher) DispatchReturns(result1 error) {
	fake.dispatchMutex.Lock()
	defer fake.dispatchMutex.Unlock()
	fake.DispatchStub = nil
	fake.dispatchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventArgsDispatcher) DispatchReturnsOnCall(i int, result1 error) {
	fake.dispatchMutex.Lock()
	defer fake.dispatchMutex.Unlock()
	fake.DispatchStub = nil
	if fake.dispatchReturnsOnCall == nil {
		fake.dispatchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dispatchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventArgsDispatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dispatchMutex.RLock()
	defer fake.dispatchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventArgsDispatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloud.EventArgsDispatcher = new(FakeEventArgsDispatcher)
